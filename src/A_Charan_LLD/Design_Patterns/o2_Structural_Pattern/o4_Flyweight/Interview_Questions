
    1️⃣ Flyweight Pattern

Definition: The Flyweight Pattern is a structural design pattern used to minimize memory usage by sharing common parts of objects
instead of creating new ones.

📌 Key Idea: If many objects have similar data, store the shared data once and reference it instead of duplicating.

🔹 Example:

Text Editors: Characters share common font, size, color instead of storing for each character.
Game Development: Trees in a game share textures and models, reducing memory.
-----------------------------------------------------------------------------------------------------------------------

            ISSUE:

1. If one object createion is taking 1kb then for 2000 it will take 2000kb.  Storage taken is more.

2. If we use the Flyweight pattern, we can reduce the memory usage by sharing common data.
-----------------------------------------------------------------------------------------------------------------

            STEPS :

1. From Object remove all Extrinsic data and keep only Intrinsic data.

2. Make Flyweight Class as Immutable,
   - 1.1. Make all the fields as final.
   - 1.2. No setters.
   - 1.3. Constructor should take all the values.

2. Extrinsic data should be passed as method arguments. as parameters.

3. Once Flyweight is created, Cache it and reuse the same object for future use.



-> What is difference between Flyweight and Prototype pattern?

Each clone() call creates a new object in memory.
Even though it's a copy, it’s not shared — every clone is separate and modifiable independently.

Flyweight → You reuse the same object
You don’t create a copy — you get a shared instance.
Intrinsic data is shared; extrinsic data is passed externally.
